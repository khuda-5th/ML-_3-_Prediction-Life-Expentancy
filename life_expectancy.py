# -*- coding: utf-8 -*-
"""life_expectancy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AKY31g5x8Ho9JG5KH5ydKDpVJNaLLJ9j

# KHUDA 3조 ToyProject

## 주제: 기대 수명 분석 및 예측

## 1. 라이브러리 불러오기
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, MinMaxScaler
import numpy as np
from google.colab import files

"""## 2. EDA"""

# 데이터셋을 불러오기
df = pd.read_csv('Life Expectancy Data.csv')

df.head()

df.describe()

df.info()
# 위 코드에서 Polio가 다른 특성들보다 더 낮게 나와서 null 값이 있는지 확인
df.isna().sum()
# null 값 나오는 샘플 찾기
df[df.isna().any(axis=1)]
# 위의 샘플들을 제거
df = df.drop(df.index[1728:1734]).reset_index().drop(['index'], axis=1)

"""데이터를 불러왔을 때 연관성이 있는 카테고리로 분류를 해서 따로 데이터프레임을 생성하였다. 각각의 데이터프레임끼리의 연관성을 확인하면서 EDA와 전처리를 진행할 예정이다.

## Life Expectancy
"""

sns.histplot(data=df['Life_expectancy'], kde=True)

"""## Alcohol"""
# Alcohol_consumption 데이터 EDA와 전처리
plt.figure(figsize=(10,10))
sns.histplot(data=df['Alcohol_consumption'],kde=True, bins=5)
plt.show()

# Alcohol_consumption 데이터를 병수로 변환하기
alcohol = []
for i in range(len(df['Alcohol_consumption'])):
  if df['Alcohol_consumption'][i] <= 3.75:
    alcohol.append([1])
  elif df['Alcohol_consumption'][i] <= 7.4:
    alcohol.append([2])
  elif df['Alcohol_consumption'][i] <= 11:
    alcohol.append([3])
  elif df['Alcohol_consumption'][i] <= 14.75:
    alcohol.append([4])
  else:
    alcohol.append([5])

# 데이터프레임에서 원래 Alcohol_consumption 특성을 제거하고 변환된 값들의 특성을 추가하기
alcohol_df = pd.DataFrame(alcohol, columns=['Alcohol_consumption'])

df = df.drop(['Alcohol_consumption'], axis=1)
df = df.join(alcohol_df)

df.info()

"""## Lifestyle"""

# Life_expectancy와 Alcohol_consumption, BMI가 각 상관 관계 보기
columns = ['Life_expectancy', 'Alcohol_consumption', 'BMI']
lifestyle_df = pd.DataFrame(df, columns=columns)
lifestyle_df.head()

# 회귀 그래프를 그려보기

figure, axis = plt.subplots(1,2,figsize=(10,10))
sns.regplot(x='Life_expectancy', y='Alcohol_consumption', data=lifestyle_df, ax=axis[0])
axis[0].set_title('Life_expectancy vs Alcohol_consumption')

sns.regplot(x='Life_expectancy', y='BMI', data=lifestyle_df, ax=axis[1])
axis[1].set_title('Life_expectancy vs BMI')

plt.tight_layout()
plt.show()


sns.heatmap(lifestyle_df.corr(), annot=True)

"""## Health"""

# Life_expectancy가 건강 관련 특성들과 상관관계 보기
columns = ['Life_expectancy', 'Alcohol_consumption', 'BMI', 'Thinness_five_nine_years', 'Thinness_ten_nineteen_years', 'Diphtheria', 'Hepatitis_B', 'Polio', 'Income composition of resources', 'Incidents_HIV', 'Measles']
health_df = pd.DataFrame(df, columns=columns)
health_df.head()

# 회귀 그래프를 그려보기
figure, axis = plt.subplots(1, 2,figsize=(10,10))

sns.regplot(x='Life_expectancy', y='Thinness_five_nine_years', data=health_df, ax=axis[0])
axis[0].set_title('Life_expectancy vs Thinness_five_nine_years')

sns.regplot(x='Life_expectancy', y='Thinness_ten_nineteen_years', data=health_df, ax=axis[1])
axis[1].set_title('Life_expectancy vs Thinness_ten_nineteen_years')


plt.tight_layout()
plt.show()

columns = ['Life_expectancy', 'Thinness_five_nine_years', 'Thinness_ten_nineteen_years']
healthcare_df = pd.DataFrame(df, columns=columns)

sns.heatmap(healthcare_df.corr(), annot=True)

"""기대수명과 알코올, BMI, BMI지수가 낮은 마른체형유병률과의 상관계수가 0.4~0.5 사이로, 유의미한 결과가 나오지 않았다.

## Disease
"""
# Life_expectancy의 유병율, 백신 접종률 관련 특성들과 상관 관계 보기
columns = ['Life_expectancy', 'Diphtheria', 'Hepatitis_B', 'Polio', 'Incidents_HIV', 'Measles']
disease_df = pd.DataFrame(df, columns=columns)
disease_df.head()

# 산점도 그려보기
figure, axis = plt.subplots(2,3,figsize=(20,10))

axis[0,0].scatter(disease_df['Diphtheria'], disease_df['Life_expectancy'])
axis[0,0].set_ylabel('Life_expectancy')
axis[0,0].set_xlabel('Diphtheria')
axis[0,0].set_title('Life_expectancy vs Diphtheria')

axis[0,1].scatter(disease_df['Hepatitis_B'], disease_df['Life_expectancy'])
axis[0,1].set_ylabel('Life_expectancy')
axis[0,1].set_xlabel('Hepatitis_B')
axis[0,1].set_title('Life_expectancy vs Hepatitis_B')

axis[0,2].scatter(disease_df['Polio'], disease_df['Life_expectancy'])
axis[0,2].set_ylabel('Life_expectancy')
axis[0,2].set_xlabel('Polio')
axis[0,2].set_title('Life_expectancy vs Polio')

axis[1,0].scatter(disease_df['Incidents_HIV'], disease_df['Life_expectancy'])
axis[1,0].set_ylabel('Life_expectancy')
axis[1,0].set_xlabel('Incidents_HIV')
axis[1,0].set_title('Life_expectancy vs Incidents_HIV')

axis[1,1].scatter(disease_df['Measles'], disease_df['Life_expectancy'])
axis[1,1].set_ylabel('Life_expectancy')
axis[1,1].set_xlabel('Measles')
axis[1,1].set_title('Life_expectancy vs Measles')

plt.tight_layout()
plt.show()

# 상관관계 히트맵 그려보기
sns.heatmap(disease_df.corr(), annot=True)

"""## Region"""

# Life_expectancy가 경제 관련 특성들과 상관관계 보기
columns = ['Life_expectancy', 'Population_mln', 'Economy_status_Developed', 'GDP_per_capita', 'Total expenditure', 'percentage expenditure','Income composition of resources', 'Schooling']
region_df = pd.DataFrame(df, columns=columns)
region_df.head()

# 산점도 그려보기
figure, axis = plt.subplots(2,3,figsize=(20,20))

axis[0,0].scatter(df['Population_mln'], df['Life_expectancy'])
axis[0,0].set_ylabel('Life_expectancy')
axis[0,0].set_xlabel('Population_mln')
axis[0,0].set_title('Life_expectancy vs Population_mln')

axis[0,1].scatter(df['GDP_per_capita'], df['Life_expectancy'])
axis[0,1].set_ylabel('Life_expectancy')
axis[0,1].set_xlabel('GDP_per_capita')
axis[0,1].set_title('Life_expectancy vs GDP_per_capita')

axis[0,2].scatter(df['Total expenditure'], df['Life_expectancy'])
axis[0,2].set_ylabel('Life_expectancy')
axis[0,2].set_xlabel('Total expenditure')
axis[0,2].set_title('Life_expectancy vs Total expenditure')

axis[1,0].scatter(df['percentage expenditure'], df['Life_expectancy'])
axis[1,0].set_ylabel('Life_expectancy')
axis[1,0].set_xlabel('percentage expenditure')
axis[1,0].set_title('Life_expectancy vs percentage expenditure')

axis[1,1].scatter(df['Income composition of resources'], df['Life_expectancy'])
axis[1,1].set_ylabel('Life_expectancy')
axis[1,1].set_xlabel('Income composition of resources')
axis[1,1].set_title('Life_expectancy vs Income composition of resources')

axis[1,2].scatter(df['Schooling'], df['Life_expectancy'])
axis[1,2].set_ylabel('Life_expectancy')
axis[1,2].set_xlabel('Schooling')
axis[1,2].set_title('Life_expectancy vs Schooling')

plt.tight_layout()
plt.show()

# 히트맵 그려보기
sns.heatmap(region_df.corr(), annot=True)


"""## 3. 데이터 전처리"""

transformed_df = pd.DataFrame(df, columns=['Adult_mortality', 'BMI', 'Diphtheria', 'Polio', 'Incidents_HIV', 'GDP_per_capita'])
transformed_df = transformed_df.join(df['Alcohol_consumption'])
transformed_df = transformed_df.join(df['Economy_status_Developed'].reset_index().drop(['index'],axis=1))
transformed_df.head()

life_exp = df['Life_expectancy']
life_exp.info()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(transformed_df, life_exp, test_size=0.3, random_state=42)

"""랜덤 포레스트 특성 중요도 확인 시에 높은 특성 중요도 특성 값: Adult_mortality, GDP_per_capita, Measles, Diphtheria, Polio, Hepatitis_B, Population_mln, BMI, Incidents_HIV, percentage expenditure"""

from xgboost import XGBRegressor
from sklearn.model_selection import cross_validate, GridSearchCV

train_score = []
test_score = []
params = {
        'min_child_weight': [1, 5, 10],
        'gamma': [0.5, 1, 1.5, 2, 5],
        'subsample': [0.6, 0.8, 1.0],
        'colsample_bytree': [0.6, 0.8, 1.0],
        'max_depth': [3, 4, 5]
        }

xgb = XGBRegressor(tree_method='hist', random_state=42)
gs = GridSearchCV(xgb, params)

gs.fit(X_train, y_train)
print(gs.score(X_train, y_train), gs.score(X_test, y_test))

scores = cross_validate(xgb, X_train, y_train, return_train_score=True)
print(np.mean(scores['train_score']), np.mean(scores['test_score']))

gs.best_params_

xgb = XGBRegressor(tree_methods='hist', colsample_bytree = 1.0, gamma = 0.5, max_depth=5, min_child_weight=1, subsample=1)
xgb.fit(X_train, y_train)
print(xgb.score(X_train, y_train), xgb.score(X_test, y_test))

import xgboost as xgb
xgb_model = xgb.XGBRegressor(tree_methods='hist', colsample_bytree = 1.0, gamma = 0.5, max_depth=5).fit(X_train, y_train)

# 파일명
filename = 'xgb_model.model'

# 모델 저장
xgb_model.save_model(filename)

# 모델 불러오기
new_xgb_model = xgb.XGBRegressor() # 모델 초기화
new_xgb_model.load_model(filename) # 모델 불러오기

# 모델 불러오는 코드
model = xgb.Booster()
model.load_model('xgb_model.model')

# 사용자 입력 받는 함수
def get_user_input():
  user_input = {}

  user_input['나라'] = input('나라를 입력하세요: ')
  user_input['성별'] = input('성별을 입력하세요.(남자/여자): ')
  user_input['키'] = float(input('키(cm)를 입력하세요: '))
  user_input['체중'] = float(input('체중(kg) 을 입력하세요: '))
  user_input['흡연 여부'] = input('흡연 여부를 입력하세요(Y/N): ')
  user_input['음주량'] = float(input('1달 기준 음주량을 입력하세요 1~5 수준으로 입력해주세요.(1병 이하: 1, 1병~2병: 2, 2병~3병: 3, 3병~4병: 4, 5병 이상: 5): '))
  user_input['수면량'] = input('평균적으로 7시간 이상 주무시나요?(Y/N): ')

  # 사용자가 '한국' 또는 '대한민국'을 입력했을 때 추가적인 정보를 제공
  if user_input['나라'] in ['한국', '대한민국']:
      user_input['Incidents_HIV'] = 0.01
      user_input['Alcohol_consumption'] = user_input['음주량']
      user_input['Polio'] = 97.4
      user_input['Diphtheria'] = 95.9
      user_input['Economy_status'] = 1
      if['성별'] == '남자':
        user_input['Adult_mortality'] = 57.02
      else:
        user_input['Adult_mortality'] = 22.07
      user_input['BMI'] = user_input['체중'] / (user_input['키']*0.01)**2
  user_df = pd.DataFrame([user_input])


  return user_df

# 사용자 입력을 모델에 넣어 예측값을 계산하고 출력하는 코드
def predict_lifespan(model, user_input):
  user_input_processed = xgb.DMatrix(user_input.drop(['나라', '성별', '키', '체중', '흡연 여부', '음주량', '수면량'], axis=1))

  predicted_lifespan = model.predict(user_input_processed)
  print('예상 수명: ', predicted_lifespan[0])
  return predicted_lifespan

# 사용자 입력 받기
user_input = get_user_input()

# 예측값 계산 및 출력
predicted_lifespan = predict_lifespan(model, user_input)

# 수면량에 따른 기대수명 조정
if user_input['수면량'][0] == 'N' or user_input['수면량'][0] == 'n':
  if user_input['성별'][0] == '남자':
      predicted_lifespan -= 4.7
  else:
      predicted_lifespan -= 2.5

# 흡연 여부에 따른 기대수명 조정
if user_input['흡연 여부'][0] == 'Y' or user_input['흡연 여부'][0] == 'y':
  if user_input['성별'][0] == '남자':
      predicted_lifespan -= 3.73
  else:
      predicted_lifespan -= 1

print('조정된 예상 수명: ', predicted_lifespan[0])